#!/bin/bash
##Luis Zapata 2017. Identify negative selection in cancer genes


###Important to edit before running
####Hardcode where genome and fasta file are
GENOME=data/hg19.genome
FASTA=data/hg19.fasta

##Check arguments before running
if (($# < 3));  then
	echo "Please provide the three mandatory arguments 
	 -i VEP annotated input file 
	 -n name 
	 -o result output directory
	Optional arguments:
	 -m (all) | mis | non
	 -r (ssb192) | ssb7
	 -c (calculated from data) | count file (example in example_files directory)
"
	exit 1
fi	

##Explain each argument
#input = i
#name = n
#outputdir = o
#mutation type = m
#model rate parameters = r
#count model = c

##Check all arguments
while getopts "i:n:o:m:r:c:" opt; do
    case $opt in
	i)
	echo "-i was triggered, Parameter: $OPTARG" >&2 
	FILE=$OPTARG
	;;
	n)
	echo "-n was triggered, Parameter: $OPTARG" >&2
	NAME=$OPTARG
	;;
	o)
        echo "-o was triggered, Parameter: $OPTARG" >&2
        OUTDIR=$OPTARG
        ;;
        m)
        echo "-m was triggered, Parameter: $OPTARG sense" >&2
        MISSENSE=$OPTARG
        ;;
	r)
        echo "-r was triggered, Parameter: $OPTARG" >&2
        MODEL=$OPTARG
        ;;
        c)
        echo "-c was triggered, Parameter: $OPTARG" >&2
        COUNTS=$OPTARG
        ;;
	\?)
	echo "Invalid option: -$OPTARG" >&2
	exit 1
	;;
	:) 
	echo "Option -$OPTARG requires an argumrent." >&2
	exit 1
	;;	
    esac
done

##Specify the number of rate parameters and the model to be used
##default 192 rates and all muts
DATAMODEL=data/ensembl_syn_nonsyn_sites.trn.tsv.final.wide.collapsed

if  [[ $MISSENSE = "mis" ]];
then
    if [[ $MODEL = "ssb7" ]];
    then
        echo "Option ssb7 enabled and missense only. Running with 7 rate parameters"
        DATAMODEL=data/ensembl_syn_nonsyn_sites.trn.tsv.final.wide.SSB7.nocollapse
    else
	echo "Option ssb192 enabled and missense only. Running with 192 rate parameters"
        DATAMODEL=data/ensembl_syn_nonsyn_sites.trn.tsv.final.wide.nocollapse
    fi    
elif [[ $MISSENSE = "non" ]];
then
    if [[ $MODEL = "ssb7" ]];
    then
        echo "Option ssb7 enabled and nonsense only. Running with 7 rate parameters"
        DATAMODEL=data/ensembl_syn_nonsyn_sites.trn.tsv.final.wide.SSB7.nonsense
    else
	echo "Option ssb192 enabled and nonsense only. Running with 192 rate parameters"
        DATAMODEL=data/ensembl_syn_nonsyn_sites.trn.tsv.final.wide.SSB192.nonsense
    fi
else
    if [[ $MODEL = "ssb7" ]];
    then
        echo "Option ssb7 enabled and all mutations. Running with 7 rate parameters"
        DATAMODEL=data/ensembl_syn_nonsyn_sites.trn.tsv.final.wide.SSB7.collapsed
    else
	echo "Option ssb192 enabled. Running with 192 rate parameters"
        DATAMODEL=data/ensembl_syn_nonsyn_sites.trn.tsv.final.wide.collapsed
    fi      
fi



##Get columns to process and obtain trinucleotide context from file
echo "Proccessing $FILE VEP annotated file to estimate 192 and 7 rate parameters..."
#1
cut -f1,5,7,11,12 $FILE | grep -v "#" | sed 's/_/\t/1' | sed 's/_/\t/1' | awk -F"\t" '{OFS="\t"}{if($6!="-"&&length($3)==3){print $1,$2-1,$2,$0}}' > $NAME.tmp
#2 For context correction
bedtools slop -i $NAME.tmp -b 1 -g $GENOME | bedtools getfasta -fi $FASTA -bed stdin -tab | sed 's/:\|-/\t/g' > $NAME.tmp.bed
#3
paste $NAME.tmp $NAME.tmp.bed | cut -f6,14 - |  awk -F "/" '{FS="/"}{OFS="	"}{print $1,$2}' |  awk -F "" '{FS=""}{OFS="	"}{if( ($1==$6) && ($3!="-") ){print "GOOD"}else{print "FAIL"}}' > $NAME.flag
#4
paste $NAME.tmp $NAME.tmp.bed $NAME.flag | awk '{if($15=="GOOD"){print $0}}' - | cut -f6,14 - |  sort -k2,2 |uniq -c | sed 's/^ \+//g' | sort -k1,1 -n | sed 's/ /	/g' | awk '{OFS="\t"}{print $3,$2,$1}' | sed -e 's/	[A-Z]\//_/g' > $NAME.finalVEP.triplets.counts


if [ -s "$COUNTS" ]
then 
	cat $COUNTS > $NAME.finalVEP.triplets.counts
	echo "Using provided file $COUNTS for correction"
else
	echo "Using estimated rate parameters for correction"
fi


###Transform 192 rate parameters to 7
if [[ $MODEL = "ssb7" ]];
    then
        echo "Option ssb7 enabled, transforming counts and running with 7 parameters"
        perl scripts/transform192to7.pl $NAME.finalVEP.triplets.counts data/final_translate_SSB192toSSB7 | awk -F "\t" '{OFS="\t"}{print $3,1,2,$2}' | sortBed -i stdin | mergeBed -i stdin -c 4 -o sum | awk '{OFS="\t"}{print $1,$4}' > tmp_to_7
        mv tmp_to_7 $NAME.finalVEP.triplets.counts
else
	echo "Using ssb192 or provided count file"
fi


##Check if triplet counts exist and how many possibilities there were (expected 192 or 7)
if [ -s "$NAME.finalVEP.triplets.counts" ] 
then
	muts=`wc -l $NAME.tmp.bed | awk '{ print $1 }'`
	back=`wc -l $NAME.finalVEP.triplets.counts | awk '{ print $1 }'`
	fails=`grep -c "FAIL" $NAME.flag`
	echo "Rate parameter file $NAME.finalVEP.triplets.counts has $back lines of data."
	rm $NAME.tmp $NAME.tmp.bed $NAME.flag 
	echo "Proccesed $muts mutations from VEP file. $fails mutations were discarded (indels or reference conflicts)"
else
	echo "$NAME.finalVEP.triplets.counts is empty."
	exit 1
fi


#####Get variant counts from vep annotated file, split into silent and nonsilent
egrep -v -e '##|intergenic_variant|UTR|downstream|intron|miRNA|frameshift|non_coding|splice_acceptor_variant|splice_donor_variant|upstream|incomplete|retained|\?' $FILE | cut -f5,7 | grep -w synonymous_variant |
awk '{OFS="\t"}{print $1,1,2,"synonymous_variant"}' | sort | uniq -c | sed 's/^ \+//g' | sed 's/ /\t/g' | awk '{OFS="\t"}{print $2,$5,$1}' > $NAME.silent

egrep -v -e '##|intergenic_variant|UTR|downstream|intron|miRNA|frameshift|non_coding|splice_acceptor_variant|splice_donor_variant|upstream|incomplete|retained|\?' $FILE | cut -f5,7 | grep -w -v synonymous_variant |
awk '{OFS="\t"}{print $1,1,2,"nonsilent_variant"}' | sort | uniq -c | sed 's/^ \+//g' | sed 's/ /\t/g' | awk '{OFS="\t"}{print $2,$5,$1}' > $NAME.nonsilent

egrep -v -e '##|intergenic_variant|UTR|downstream|intron|miRNA|frameshift|non_coding|splice_acceptor_variant|splice_donor_variant|upstream|incomplete|retained|\?' $FILE | cut -f5,7 | grep -w -v synonymous_variant  |
grep 'missense' | awk '{OFS="\t"}{print $1,1,2,"nonsilent_variant"}' | sort | uniq -c | sed 's/^ \+//g' | sed 's/ /\t/g' | awk '{OFS="\t"}{print $2,$5,$1}' > $NAME.missense

egrep -v -e '##|intergenic_variant|UTR|downstream|intron|miRNA|frameshift|non_coding|splice_acceptor_variant|splice_donor_variant|upstream|incomplete|retained|\?' $FILE | cut -f5,7 | grep -w -v synonymous_variant  |
egrep -e 'start_lost|stop_gained|stop_lost' | awk '{OFS="\t"}{print $1,1,2,"nonsilent_variant"}' | sort | uniq -c | sed 's/^ \+//g' | sed 's/ /\t/g' | awk '{OFS="\t"}{print $2,$5,$1}' > $NAME.nonsense

##Run for all nonsilent or only missense
perl scripts/correctContext_revision.pl $NAME.finalVEP.triplets.counts $DATAMODEL | awk -F"\t" '{OFS="\t"}{print $1,1,2,$0}' | mergeBed -i stdin -c 5,6,7,8,9 -o count,sum,sum,sum,sum | cut -f1,5,6,7,8 > $NAME.SSBcorrected.txt
echo "Context correction done using $DATAMODEL"

if  [[ $MISSENSE = "mis" ]];
    then
	cat $NAME.silent $NAME.missense | sort > $NAME.counts.txt
elif  [[ $MISSENSE = "non" ]];
    then
	cat $NAME.silent $NAME.nonsense | sort > $NAME.counts.txt
else
	cat $NAME.silent $NAME.nonsilent | sort > $NAME.counts.txt
fi


##Check if counts has value larger than 0
if [ -s "$NAME.counts.txt" ]
then
        rm $NAME.silent $NAME.nonsilent $NAME.missense $NAME.nonsense
else
        echo "$NAME.counts.txt is empty."
	exit 1
fi

##Check if context correction has value larger than 0 and merge with counts
if [ -s "$NAME.SSBcorrected.txt" ]
then
	Rscript scripts/longToWide_final.R $NAME.counts.txt $NAME.SSBcorrected.txt
	echo "Merging counts and context corrected sites"
else
        echo "$NAME.SSBcorrected.txt is empty."
	exit 1
fi

##Run Greenman method to detect significant genes
if [ -s "$NAME.counts.txt.mgd" ]
then
	Rscript scripts/greenmanmethod_ContextCor_final.R $NAME.counts.txt.mgd
else
        echo "$NAME.counts.txt.mgd is empty."
        exit 1
fi

#check fot existence of outdir of not create
if [ ! -d $OUTDIR ]
then
	mkdir $OUTDIR
fi

##Add hugo name to file
perl scripts/add_hugo.pl $NAME.counts.txt.mgd_res.txt data/ensembl2gene.final > $OUTDIR/$NAME.finalSSB.txt 
Rscript scripts/calc_global_dnds.R $OUTDIR/$NAME.finalSSB.txt

if [ -s "$OUTDIR/$NAME.finalSSB.txt" ]
then
        rm $NAME.SSBcorrected.txt $NAME.counts.txt  $NAME.counts.txt.mgd $NAME.counts.txt.mgd_res.txt $NAME.finalVEP.triplets.counts
	echo "Check file $NAME.finalVEP.triplets.counts for the estimated frequencies used for the correction"
	echo "Analysis $FILE done"
else
        echo "$NAME.finalSSB.txt is empty."
        exit 1
fi
